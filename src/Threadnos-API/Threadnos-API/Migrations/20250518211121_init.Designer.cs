// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using PostgreSQL.Data;

#nullable disable

namespace Threadnos_API.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250518211121_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Threadnos_API.Domain.Entities.Label", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("create_at");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<Guid?>("ThreadId")
                        .HasColumnType("uuid")
                        .HasColumnName("thread_id");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("update_at");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_labels");

                    b.HasIndex("ThreadId")
                        .HasDatabaseName("ix_labels_thread_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_labels_user_id");

                    b.ToTable("labels", (string)null);
                });

            modelBuilder.Entity("Threadnos_API.Domain.Entities.Page", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Content")
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<Guid>("ContentId")
                        .HasColumnType("uuid")
                        .HasColumnName("content_id");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("create_at");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<int>("Order")
                        .HasColumnType("integer")
                        .HasColumnName("order");

                    b.Property<Guid?>("ThreadId")
                        .HasColumnType("uuid")
                        .HasColumnName("thread_id");

                    b.Property<string>("Title")
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("update_at");

                    b.HasKey("Id")
                        .HasName("pk_pages");

                    b.HasIndex("ThreadId")
                        .HasDatabaseName("ix_pages_thread_id");

                    b.ToTable("pages", (string)null);
                });

            modelBuilder.Entity("Threadnos_API.Domain.Entities.Thread", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("create_at");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("update_at");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_threads");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_threads_user_id");

                    b.ToTable("threads", (string)null);
                });

            modelBuilder.Entity("Threadnos_API.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("create_at");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("boolean")
                        .HasColumnName("is_verified");

                    b.Property<DateTime>("LastLogin")
                        .HasColumnType("timestamp")
                        .HasColumnName("last_login");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("update_at");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("Threadnos_API.Domain.Entities.Label", b =>
                {
                    b.HasOne("Threadnos_API.Domain.Entities.Thread", null)
                        .WithMany("Labels")
                        .HasForeignKey("ThreadId")
                        .HasConstraintName("fk_labels_threads_thread_id");

                    b.HasOne("Threadnos_API.Domain.Entities.User", null)
                        .WithMany("Labels")
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_labels_users_user_id");
                });

            modelBuilder.Entity("Threadnos_API.Domain.Entities.Page", b =>
                {
                    b.HasOne("Threadnos_API.Domain.Entities.Thread", null)
                        .WithMany("Pages")
                        .HasForeignKey("ThreadId")
                        .HasConstraintName("fk_pages_threads_thread_id");
                });

            modelBuilder.Entity("Threadnos_API.Domain.Entities.Thread", b =>
                {
                    b.HasOne("Threadnos_API.Domain.Entities.User", null)
                        .WithMany("Threads")
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_threads_users_user_id");
                });

            modelBuilder.Entity("Threadnos_API.Domain.Entities.Thread", b =>
                {
                    b.Navigation("Labels");

                    b.Navigation("Pages");
                });

            modelBuilder.Entity("Threadnos_API.Domain.Entities.User", b =>
                {
                    b.Navigation("Labels");

                    b.Navigation("Threads");
                });
#pragma warning restore 612, 618
        }
    }
}
